"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[16],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),s=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(r),g=a,m=p["".concat(c,".").concat(g)]||p[g]||d[g]||o;return r?n.createElement(m,i(i({ref:t},u),{},{components:r})):n.createElement(m,i({ref:t},u))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=g;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[p]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}g.displayName="MDXCreateElement"},5620:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var n=r(7462),a=(r(7294),r(3905));const o={sidebar_position:2},i="Single-node cluster with Docker",l={unversionedId:"quick-start/with-docker",id:"quick-start/with-docker",title:"Single-node cluster with Docker",description:"First provision TigerBeetle's data directory.",source:"@site/pages/quick-start/with-docker.md",sourceDirName:"quick-start",slug:"/quick-start/with-docker",permalink:"/quick-start/with-docker",draft:!1,editUrl:"https://github.com/tigerbeetledb/tigerbeetle/blob/main/docs/quick-start/with-docker.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Single-node cluster with a single binary",permalink:"/quick-start/single-binary"},next:{title:"3-node cluster with Docker Compose",permalink:"/quick-start/with-docker-compose"}},c={},s=[{value:"<code>error: SystemResources</code> on macOS",id:"error-systemresources-on-macos",level:2},{value:"Debugging panics",id:"debugging-panics",level:2}],u={toc:s},p="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(p,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"single-node-cluster-with-docker"},"Single-node cluster with Docker"),(0,a.kt)("p",null,"First provision TigerBeetle's data directory."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"docker run -v $(pwd)/data:/data ghcr.io/tigerbeetle/tigerbeetle \\\n    format --cluster=0 --replica=0 --replica-count=1 /data/0_0.tigerbeetle\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},'info(io): creating "0_0.tigerbeetle"...\ninfo(io): allocating 660.140625MiB...\n')),(0,a.kt)("p",null,"Then run the server."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"docker run -p 3000:3000 -v $(pwd)/data:/data ghcr.io/tigerbeetle/tigerbeetle \\\n    start --addresses=0.0.0.0:3000 /data/0_0.tigerbeetle\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},'info(io): opening "0_0.tigerbeetle"...\ninfo(main): 0: cluster=0: listening on 0.0.0.0:3000\n')),(0,a.kt)("p",null,"Now you can connect to the running server with any client. For a quick\nstart, try ",(0,a.kt)("a",{parentName:"p",href:"/quick-start/node-cli"},"creating accounts and transfers in the Node\nCLI"),"."),(0,a.kt)("h2",{id:"error-systemresources-on-macos"},(0,a.kt)("inlineCode",{parentName:"h2"},"error: SystemResources")," on macOS"),(0,a.kt)("p",null,"If you get ",(0,a.kt)("inlineCode",{parentName:"p"},"error: SystemResources")," when running TigerBeetle in Docker\non macOS, you will need to do one of the following:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Run ",(0,a.kt)("inlineCode",{parentName:"li"},"docker run")," with ",(0,a.kt)("inlineCode",{parentName:"li"},"--cap-add IPC_LOCK")),(0,a.kt)("li",{parentName:"ol"},"Run ",(0,a.kt)("inlineCode",{parentName:"li"},"docker run")," with ",(0,a.kt)("inlineCode",{parentName:"li"},"--ulimit memlock=-1:-1")),(0,a.kt)("li",{parentName:"ol"},"Or modify the defaults in ",(0,a.kt)("inlineCode",{parentName:"li"},"$HOME/.docker/daemon.json")," and restart the Docker for Mac application:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  ... other settings ...\n  "default-ulimits": {\n    "memlock": {\n      "Hard": -1,\n      "Name": "memlock",\n      "Soft": -1\n    }\n  },\n  ... other settings ...\n}\n')),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/tigerbeetle/tigerbeetle/issues/92"},"https://github.com/tigerbeetle/tigerbeetle/issues/92")," for discussion."),(0,a.kt)("h2",{id:"debugging-panics"},"Debugging panics"),(0,a.kt)("p",null,"If TigerBeetle panics and you can reproduce the panic, you can get a\nbetter stack trace by switching to a debug image (by using the ",(0,a.kt)("inlineCode",{parentName:"p"},":debug"),"\nDocker image tag)."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-console"},"docker run -p 3000:3000 -v $(pwd)/data:/data ghcr.io/tigerbeetle/tigerbeetle:debug \\\n    start --addresses=0.0.0.0:3000 /data/0_0.tigerbeetle\n")))}d.isMDXComponent=!0}}]);